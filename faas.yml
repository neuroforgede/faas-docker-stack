version: "3.8"
services:
  gateway:
    ports:
      - 8080:8080
      # - 8082:8082
    image: ghcr.io/openfaas/gateway:0.25.3
    networks:
      - functions
    environment:
      functions_provider_url: "http://nf-faas-docker:8080/"
      read_timeout: "5m5s" # Maximum time to read HTTP request
      write_timeout: "5m5s" # Maximum time to write HTTP response
      upstream_timeout: "5m" # Maximum duration of upstream function call - should be more than read_timeout and write_timeout
      dnsrr: "true" # Temporarily use dnsrr in place of VIP while issue persists on PWD
      faas_nats_address: "nats"
      faas_nats_port: 4222
      direct_functions: "true" # Functions are invoked directly over the overlay network
      direct_functions_suffix: ""
      basic_auth: "${BASIC_AUTH:-false}"
      secret_mount_path: "/run/secrets/"
      scale_from_zero: "true" # Enable if you want functions to scale from 0/0 to min replica count upon invoke
      max_idle_conns: 1024
      max_idle_conns_per_host: 1024
      auth_proxy_url: "${AUTH_URL:-}"
      auth_proxy_pass_body: "false"
    deploy:
      resources:
        # limits:   # Enable if you want to limit memory usage
        #     memory: 200M
        reservations:
          memory: 100M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 20
        window: 380s
      placement:
        constraints:
          - "node.platform.os == linux"
    secrets:
      - source: basic-auth-user
        target: basic-auth-user
      - source: basic-auth-password
        target: basic-auth-password

  # auth service provide basic-auth plugin for system APIs
  # FIXME: seems to work, check if we need to upgrade this though
  basic-auth-plugin:
    image: openfaas/basic-auth-plugin:0.18.18
    networks:
      - functions
    environment:
      secret_mount_path: "/run/secrets/"
      user_filename: "basic-auth-user"
      pass_filename: "basic-auth-password"
    deploy:
      placement:
        constraints:
          - "node.role == manager"
          - "node.platform.os == linux"
      resources:
        # limits:   # Enable if you want to limit memory usage
        #     memory: 100M
        reservations:
          memory: 50M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 20
        window: 380s
    secrets:
      - source: basic-auth-user
        target: basic-auth-user
      - source: basic-auth-password
        target: basic-auth-password

  # Docker Swarm provider
  nf-faas-docker:
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    image: neuroforgede/nf-faas-docker:0.12.0-dev
    networks:
      - functions
    environment:
      read_timeout: "5m5s" # set both here, and on your functions
      write_timeout: "5m5s" # set both here, and on your functions
      DOCKER_API_VERSION: "1.41"
      NF_FAAS_DOCKER_PROJECT: "default"
      NF_FAAS_ALWAYS_RESOLVE_IMAGE: "true"
      basic_auth: "${BASIC_AUTH:-false}"
      secret_mount_path: "/run/secrets/"
      DOCKER_CONFIG_PATH: /run/secrets/docker-config
    deploy:
      placement:
        constraints:
          - "node.role == manager"
          - "node.platform.os == linux"
      resources:
        # limits:   # Enable if you want to limit memory usage
        #     memory: 100M
        reservations:
          memory: 100M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 20
        window: 380s
    secrets:
      - source: basic-auth-user
        target: basic-auth-user
      - source: basic-auth-password
        target: basic-auth-password
      - source: docker-config
        target: docker-config

  nats:
    image: nats-streaming:0.25.2
    # Uncomment the following port mappings if you wish to expose the
    # NATS client and/or management ports you must also add `-m 8222` to the command
    # ports:
    #     - 4222:4222
    #     - 8222:8222
    command: "--store memory --cluster_id faas-cluster"
    networks:
      - functions
    deploy:
      resources:
        limits:
          memory: 125M
        reservations:
          memory: 50M
      placement:
        constraints:
          - "node.platform.os == linux"

  queue-worker:
    image: ghcr.io/openfaas/queue-worker:0.13.1
    networks:
      - functions
    environment:
      max_inflight: "1"
      ack_wait: "5m5s" # Max duration of any async task / request
      basic_auth: "${BASIC_AUTH:-false}"
      secret_mount_path: "/run/secrets/"
      gateway_invoke: "true"
      faas_gateway_address: "gateway"
    deploy:
      resources:
        limits:
          memory: 50M
        reservations:
          memory: 20M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 20
        window: 380s
      placement:
        constraints:
          - "node.platform.os == linux"
    secrets:
      - source: basic-auth-user
        target: basic-auth-user
      - source: basic-auth-password
        target: basic-auth-password

  # End services

  # Start monitoring

  prometheus:
    image: prom/prometheus:v2.36.0
    environment:
      no_proxy: "gateway"
    configs:
      - source: prometheus_config
        target: /etc/prometheus/prometheus.yml
      - source: prometheus_rules
        target: /etc/prometheus/alert.rules.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    #   - '-storage.local.path=/prometheus'
    ports:
      - 9090:9090
    networks:
      - functions
    deploy:
      placement:
        constraints:
          - "node.role == manager"
          - "node.platform.os == linux"
      resources:
        limits:
          memory: 500M
        reservations:
          memory: 200M

  alertmanager:
    image: prom/alertmanager:v0.24.0
    environment:
      no_proxy: "gateway"
    command:
      - "--config.file=/alertmanager.yml"
      - "--storage.path=/alertmanager"
    networks:
      - functions
    # Uncomment the following port mapping if you wish to expose the Prometheus
    #Â Alertmanager UI.
    ports:
        - 9093:9093
    deploy:
      resources:
        limits:
          memory: 50M
        reservations:
          memory: 20M
      placement:
        constraints:
          - "node.role == manager"
          - "node.platform.os == linux"
    configs:
      - source: alertmanager_config
        target: /alertmanager.yml
    secrets:
      - source: basic-auth-password
        target: basic-auth-password

  grafana:
    entrypoint: /custom_entrypoint.sh
    image: grafana/grafana:9.1.6
    healthcheck:
      test: ["CMD", "wget", "--tries=1", "--spider", "--quiet", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 10s
      retries: 2
      start_period: 10s
    ports:
      - 9099:3000
    user: root
    networks:
      - functions
    environment:
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana:/var/lib/grafana
    secrets:
      - source: grafana_environment_sh
        target: grafana_environment_sh
    configs:
      - source: grafana_openfaas_dash
        target: /etc/grafana/dashboards/openfaas-dash.json

      - source: grafana_dashboards
        target: /etc/grafana/provisioning/dashboards/dashboards.yaml

      - source: grafana_datasource_prometheus
        target: /etc/grafana/provisioning/datasources/prometheus.yaml

      - source: grafana_datasource_entrypoint
        target: /custom_entrypoint.sh
        mode: 0777
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          memory: 1024M
        reservations:
          memory: 128M

configs:
  prometheus_config:
    file: ./configs/prometheus/prometheus.yml
  prometheus_rules:
    file: ./configs/prometheus/alert.rules.yml
  alertmanager_config:
    file: ./configs/prometheus/alertmanager.yml

  grafana_openfaas_dash:
    file: ./configs/grafana/conf/dashboards/openfaas-dash.json
  grafana_datasource_prometheus:
    file: ./configs/grafana/conf/datasources/prometheus.yaml
  grafana_dashboards:
    file: ./configs/grafana/conf/dashboards.yaml
  grafana_datasource_entrypoint:
    file: ./configs/grafana/conf/docker-entrypoint.sh

networks:
  functions:
    driver: overlay
    driver_opts:
      encrypted: ""
      com.docker.network.driver.mtu: "1350"
    attachable: true
    labels:
      - "openfaas=true"
      - "com.github.neuroforgede.nf-faas-docker.project=default"

secrets:
  basic-auth-user:
    file: ./secrets/basic-auth-user
  basic-auth-password:
    file: ./secrets/basic-auth-password

  # probably you dont want to do this in production, do this more selectively
  docker-config:
    file: /home/martinb/.docker/config.json

  grafana_environment_sh:
    file: ./secrets/grafana/environment.sh


volumes:
  grafana:
